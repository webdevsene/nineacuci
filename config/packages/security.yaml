security:

    role_hierarchy:
        ROLE_BREA_AGENT_SAISIE: ROLE_USER
        ROLE_BSE_AGENT_SAISIE: ROLE_USER
        ROLE_ADMIN_DSECN: [ROLE_BREA_ADMIN,ROLE_BSE_ADMIN]
        ROLE_BREA_ADMIN: ROLE_BREA_AGENT_SAISIE
        ROLE_BSE_ADMIN: ROLE_BSE_AGENT_SAISIE
        ROLE_CUCI: ROLE_CUCI
        ROLE_NINEA_ADMIN: ROLE_DEMANDE_NINEA,ROLE_VALIDER_DEMANDE_NINEA,ROLE_CONSULTATION_NINEA,ROLE_CONSULTATION_NINEA
        ROLE_NINEA: ROLE_NINEA
        ROLE_ADMIN:       ROLE_USER,ROLE_BREA_ADMIN,ROLE_BSE_ADMIN,ROLE_NINEA_ADMIN
       
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
    firewalls:    
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            pattern: ^/
            user_checker: App\Security\UserChecker
            login_throttling:
                max_attempts: 3
            logout:
                path: app_logout
                target: login
            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login
                enable_csrf: true
                default_target_path: index

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

      
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/user, roles: ROLE_USER }
        - { path: ^/accueil, roles: ROLE_USER }
        - { path: ^/actionnaire, roles: ROLE_USER }
        - { path: ^/activities, roles: ROLE_USER }
        - { path: ^/bilan, roles: ROLE_USER }
        - { path: ^/immo, roles: ROLE_USER }
        - { path: ^/cuci, roles: ROLE_USER }
        - { path: ^/commissaires, roles: ROLE_USER }
        - { path: ^/dirigeant, roles: ROLE_USER }
        - { path: ^/filiales, roles: ROLE_USER }
        - { path: ^/membre, roles: ROLE_USER }
        - { path: ^/cacr, roles: ROLE_USER }
        - { path: ^/cav, roles: ROLE_USER }
        - { path: ^/citi, roles: ROLE_USER }
        - { path: ^/departement, roles: ROLE_USER }
        - { path: ^/naema, roles: ROLE_USER }
        - { path: ^/naemas, roles: ROLE_USER }
        - { path: ^/ref, roles: ROLE_USER }
        - { path: ^/repertoire, roles: ROLE_USER }
        - { path: ^/syscoa, roles: ROLE_USER }
        - { path: ^//compte, roles: ROLE_USER }
        - { path: ^/flux/tresoreries, roles: ROLE_USER }
        - { path: ^/effectifs, roles: ROLE_USER }
        - { path: ^/achat, roles: ROLE_USER }
        - { path: ^/production, roles: ROLE_USER }
        - { path: ^/ninea, roles: ROLE_USER }
        - { path: ^/nineaproposition, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
