<?php

namespace App\Entity;

use App\Repository\NiNatureLocaliteExploitationRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass=NiNatureLocaliteExploitationRepository::class)
 * @ORM\Table(name="`ni_nature`")
 */
class NiNatureLocaliteExploitation
{
    /**
     * @ORM\Id
     * @ORM\Column(type="string", length=10)

     */
    private $id;

  
    /**
     * @ORM\Column(name="nleLibelle",type="string", length=100, name="nin_Naturelibelle")
     */
    private $nleLibelle;

    /**
     * @ORM\OneToMany(targetEntity=NiNineaproposition::class, mappedBy="ninNature")
     */
    private $niNineapropositions;

    /**
     * @ORM\OneToMany(targetEntity=NINinea::class, mappedBy="ninNature")
     */
    private $nINineas;

    /**
     * @ORM\OneToMany(targetEntity=HistoryNINinea::class, mappedBy="ninNature")
     */
    private $historyNINineas;

    /**
     * @ORM\OneToMany(targetEntity=TempNINinea::class, mappedBy="ninNature")
     */
    private $tempNINineas;

    public function __construct()
    {
        $this->niNineapropositions = new ArrayCollection();
        $this->nINineas = new ArrayCollection();
        $this->historyNINineas = new ArrayCollection();
        $this->tempNINineas = new ArrayCollection();
    }

  



    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNleCode(): ?string
    {
        return $this->nleCode;
    }

    public function setNleCode(?string $nleCode): self
    {
        $this->nleCode = $nleCode;

        return $this;
    }

    public function getNleLibelle(): ?string
    {
        return $this->nleLibelle;
    }

    public function setNleLibelle(string $nleLibelle): self
    {
        $this->nleLibelle = $nleLibelle;

        return $this;
    }

 


    public function __toString()
    {
        return $this->nleLibelle;
    }

    /**
     * @return Collection<int, NINinea>
     */
    public function getNINineas(): Collection
    {
        return $this->nINineas;
    }

    public function addNINinea(NINinea $nINinea): self
    {
        if (!$this->nINineas->contains($nINinea)) {
            $this->nINineas[] = $nINinea;
            $nINinea->setNinNature($this);
        }

        return $this;
    }

    public function removeNINinea(NINinea $nINinea): self
    {
        if ($this->nINineas->removeElement($nINinea)) {
            // set the owning side to null (unless already changed)
            if ($nINinea->getNinNature() === $this) {
                $nINinea->setNinNature(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, NiNineaproposition>
     */
    public function getNiNineapropositions(): Collection
    {
        return $this->niNineapropositions;
    }

    public function addNiNineaproposition(NiNineaproposition $niNineaproposition): self
    {
        if (!$this->niNineapropositions->contains($niNineaproposition)) {
            $this->niNineapropositions[] = $niNineaproposition;
            $niNineaproposition->setNinNature($this);
        }

        return $this;
    }

    public function removeNiNineaproposition(NiNineaproposition $niNineaproposition): self
    {
        if ($this->niNineapropositions->removeElement($niNineaproposition)) {
            // set the owning side to null (unless already changed)
            if ($niNineaproposition->getNinNature() === $this) {
                $niNineaproposition->setNinNature(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, HistoryNINinea>
     */
    public function getHistoryNINineas(): Collection
    {
        return $this->historyNINineas;
    }

    public function addHistoryNINinea(HistoryNINinea $historyNINinea): self
    {
        if (!$this->historyNINineas->contains($historyNINinea)) {
            $this->historyNINineas[] = $historyNINinea;
            $historyNINinea->setNinNature($this);
        }

        return $this;
    }

    public function removeHistoryNINinea(HistoryNINinea $historyNINinea): self
    {
        if ($this->historyNINineas->removeElement($historyNINinea)) {
            // set the owning side to null (unless already changed)
            if ($historyNINinea->getNinNature() === $this) {
                $historyNINinea->setNinNature(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, TempNINinea>
     */
    public function getTempNINineas(): Collection
    {
        return $this->tempNINineas;
    }

    public function addTempNINinea(TempNINinea $tempNINinea): self
    {
        if (!$this->tempNINineas->contains($tempNINinea)) {
            $this->tempNINineas[] = $tempNINinea;
            $tempNINinea->setNinNature($this);
        }

        return $this;
    }

    public function removeTempNINinea(TempNINinea $tempNINinea): self
    {
        if ($this->tempNINineas->removeElement($tempNINinea)) {
            // set the owning side to null (unless already changed)
            if ($tempNINinea->getNinNature() === $this) {
                $tempNINinea->setNinNature(null);
            }
        }

        return $this;
    }

  
}
